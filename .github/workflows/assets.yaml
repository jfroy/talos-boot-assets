---
name: Talos Boot Assets Generation

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: Container image tag for the release
        required: true
      siderolabs_tag:
        description: Upstream release tag for extensions manifest
        required: true
      build_pkgs:
        description: Build pkgs
        type: boolean
        default: true
        required: false
      build_extensions:
        description: Build extensions
        type: boolean
        default: true
        required: false
      build_talos:
        description: Build talos
        type: boolean
        default: true
        required: false
      build_nvidia_driver_container:
        description: Build NVIDIA driver container
        type: boolean
        default: false
        required: false

concurrency:
  group: ${{ github.actor }}-build

env:
  KERNEL_VERSION: "6.10.6-talos"
  NVIDIA_DRIVER_VERSION: "550.90.07"

jobs:
  set-rel:
    name: Set release branch
    runs-on: ubuntu-latest

    steps:
      - name: Set release branch
        id: set
        run: |
          release_branch=release-$(grep -Eo '[0-9]\.[0-9]+' <<< ${{ inputs.release_tag }})
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT

    outputs:
      release_branch: ${{ steps.set.outputs.release_branch }}

  build-pkgs:
    needs: [set-rel]
    if: ${{ !failure() && !cancelled() && inputs.build_pkgs }}
    name: Build packages
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-pkgs
          ref: ${{ needs.set-rel.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              gc = true
              gckeepstorage = 50000

              [[worker.oci.gcpolicy]]
                keepBytes = 10737418240
                keepDuration = 604800
                filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
              [[worker.oci.gcpolicy]]
                all = true
                keepBytes = 53687091200

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          mkdir -p _out
          for target in ca-certificates base kernel nvidia-open-gpu-kernel-modules-production-pkg zfs-pkg; do
            make $target \
              PLATFORM=linux/amd64 \
              USERNAME="${{ github.actor }}" \
              REGISTRY_AND_USERNAME="ghcr.io/${{ github.actor }}/siderolabs" \
              TAG="${{ inputs.release_tag }}" \
              PUSH="true" \
              CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
            cosign sign --yes --recursive "$(jq -j .\"image.name\" _out/meta)@$(jq -j .\"containerimage.digest\" _out/meta)"
          done

  build-extensions:
    needs: [set-rel, build-pkgs]
    if: ${{ !failure() && !cancelled() && (inputs.build_extensions || needs.build-pkgs.result == 'success') }}
    name: Build extensions
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-extensions
          ref: ${{ needs.set-rel.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Install crane
        uses: imjasonh/setup-crane@v0.4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make _out/bldr
          crane export ghcr.io/siderolabs/extensions:${{ inputs.siderolabs_tag }} | tar x -C internal/extensions/
          for target in glibc nvidia-driver-production zfs; do
            make $target \
              PLATFORM=linux/amd64 \
              PKGS="${{ inputs.release_tag }}" \
              PKGS_PREFIX="ghcr.io/${{ github.actor }}/siderolabs" \
              REGISTRY="ghcr.io/${{ github.actor }}" \
              TAG="${{ inputs.release_tag }}" \
              PUSH="true" \
              CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
            image="$(jq -j .\"image.name\" _out/meta)@$(jq -j .\"containerimage.digest\" _out/meta)"
            cosign sign --yes --recursive "$image"
            echo "$image" >> internal/extensions/image-digests
            crane export "$image" - | tar x -O --occurrence=1 manifest.yaml | yq -r ". += {\"$image\": {\"author\": .metadata.author, \"description\": .metadata.description}} | del(.metadata, .version)" - >> internal/extensions/descriptions.yaml
          done

      - name: Build manifest image
        run: |
          mkdir -p _out
          make docker-extensions \
            PLATFORM=linux/amd64 \
            PKGS="${{ inputs.release_tag }}" \
            PKGS_PREFIX="ghcr.io/${{ github.actor }}/siderolabs" \
            REGISTRY="ghcr.io/${{ github.actor }}" \
            TAG="${{ inputs.release_tag }}" \
            TARGET_ARGS="--tag=ghcr.io/${{ github.actor }}/siderolabs/extensions:${{ inputs.release_tag }} --push=true" \
            CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
          cosign sign --yes --recursive "$(jq -j .\"image.name\" _out/meta)@$(jq -j .\"containerimage.digest\" _out/meta)"

  build-talos:
    needs: [set-rel, build-pkgs]
    if: ${{ !failure() && !cancelled() && (inputs.build_talos || needs.build-pkgs.result == 'success') }}
    name: Build talos
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-talos
          ref: ${{ needs.set-rel.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          mkdir -p _out
          for target in imager installer; do
            make $target \
              PLATFORM="linux/amd64,linux/arm64" \
              INSTALLER_ARCH="amd64" \
              PKG_KERNEL="ghcr.io/${{ github.actor }}/siderolabs/kernel:${{ inputs.release_tag }}" \
              USERNAME="${{ github.actor }}" \
              REGISTRY_AND_USERNAME="ghcr.io/${{ github.actor }}/siderolabs" \
              TAG="${{ inputs.release_tag }}" \
              PUSH="true" \
              CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
            cosign sign --yes --recursive "$(jq -j .\"image.name\" _out/meta)@$(jq -j .\"containerimage.digest\" _out/meta)"
          done

      - name: Build talosctl image
        run: |
          mkdir -p _out
          make talosctl-image \
            PLATFORM="linux/amd64,linux/arm64" \
            USERNAME="${{ github.actor }}" \
            REGISTRY_AND_USERNAME="ghcr.io/${{ github.actor }}/siderolabs" \
            TAG="${{ inputs.release_tag }}" \
            PUSH="true" \
            CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
          cosign sign --yes --recursive "$(jq -j .\"image.name\" _out/meta)@$(jq -j .\"containerimage.digest\" _out/meta)"

  build-nvidia-driver-container:
    needs: [set-rel, build-pkgs]
    if: ${{ !failure() && !cancelled() && inputs.build_nvidia_driver_container }}
    name: Build NVIDIA driver container
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/gpu-driver-container
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          cd talos
          docker buildx build \
            --build-arg DRIVER_VERSION=${{ env.NVIDIA_DRIVER_VERSION }} \
            --build-arg KERNEL_VERSION=${{ env.KERNEL_VERSION }} \
            --build-arg TALOS_VERSION=${{ inputs.release_tag }} \
            -t ghcr.io/${{ github.actor }}/siderolabs/nvidia-driver:${{ env.NVIDIA_DRIVER_VERSION }}-${{ env.KERNEL_VERSION }}-talos${{ inputs.release_tag }} \
            --push \
            .

---
name: Talos Boot Assets Generation

on:
  workflow_dispatch:
    inputs:
      version:
        description: Talos version
        default: latest
        required: false
      force_build:
        description: Force build
        type: boolean
        default: false
        required: false

concurrency:
  group: ${{ github.actor }}-build

env:
  TALOS_VERSION: "${{ inputs.version || 'latest' }}"
  # renovate: depName=ghcr.io/siderolabs/amd-ucode
  AMD_UCODE_VERSION: "20240513"
  GLIBC_VERSION: "2.39"
  # renovate: depName=ghcr.io/siderolabs/iscsi-tools
  ISCSI_TOOLS_VERSION: "v0.1.4"
  NVIDIA_CONTAINER_TOOLKIT_VERSION: "v1.16.1"
  NVIDIA_DRIVER_VERSION: "550.107.02"
  # renovate: depName=ghcr.io/siderolabs/util-linux-tools
  UTIL_LINUX_TOOLS_VERSION: "2.39.3"
  ZFS_VERSION: "2.2.6"

jobs:
  check-releases:
    name: Check for new releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Talos release version
        id: talos-release
        run: |
          if [ "${{ env.TALOS_VERSION }}" == "latest" ]; then
            talos_release_tag=$(curl -sL https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r ".tag_name")
          else
            talos_release_tag="${{ env.TALOS_VERSION }}"
          fi
          echo "talos_release_tag=$talos_release_tag" >> $GITHUB_OUTPUT
          release_branch=release-$(grep -Eo '[0-9]\.[0-9]+' <<< $talos_release_tag)
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT

      - name: Fetch latest Boot Assets release version
        id: boot-asset-release
        run: |
          boot_assets_release_tag=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r ".tag_name")
          echo "boot_assets_release_tag=$boot_assets_release_tag" >> $GITHUB_OUTPUT

      - name: Compare release versions
        id: compare-releases
        run: |
          cmp=$(./.github/scripts/semver2.sh \
            ${{ steps.talos-release.outputs.talos_release_tag }} \
            ${{ steps.boot-asset-release.outputs.boot_assets_release_tag }})
          if [[ $cmp == 0 ]]; then
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "new_release=true" >> $GITHUB_OUTPUT
          fi

    outputs:
      new_release: ${{ steps.compare-releases.outputs.new_release }}
      release_branch: ${{ steps.talos-release.outputs.release_branch }}
      talos_release_tag: ${{ steps.talos-release.outputs.talos_release_tag }}

  build-pkgs:
    needs: [check-releases]
    if: ${{ needs.check-releases.outputs.new_release == 'true' || inputs.force_build }}
    name: Build packages
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-pkgs
          ref: ${{ needs.check-releases.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              gc = true
              gckeepstorage = 50000

              [[worker.oci.gcpolicy]]
                keepBytes = 10737418240
                keepDuration = 604800
                filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
              [[worker.oci.gcpolicy]]
                all = true
                keepBytes = 53687091200

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make ca-certificates base kernel nvidia-open-gpu-kernel-modules-pkg zfs-pkg \
            PLATFORM=linux/amd64 \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ needs.check-releases.outputs.talos_release_tag }}" \
            PUSH="true"

  build-extensions:
    needs: [check-releases, build-pkgs]
    name: Build extensions
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-extensions
          ref: ${{ needs.check-releases.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make glibc nvidia-container-toolkit nvidia-open-gpu-kernel-modules zfs \
            PLATFORM=linux/amd64 \
            PKGS="${{ needs.check-releases.outputs.talos_release_tag }}" \
            PKGS_PREFIX="ghcr.io/${{ github.actor }}/talos" \
            USERNAME="${{ github.actor }}/talos" \
            PUSH=true

  build-talos:
    needs: [check-releases, build-pkgs, build-extensions]
    name: Build talos
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-talos
          ref: ${{ needs.check-releases.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make imager installer \
            INSTALLER_ARCH="amd64" \
            PLATFORM="linux/amd64" \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ needs.check-releases.outputs.talos_release_tag }}" \
            PKG_KERNEL="ghcr.io/${{ github.actor }}/talos/kernel:${{ needs.check-releases.outputs.talos_release_tag }}" \
            PUSH="true"
          make talosctl \
            PLATFORM="linux/amd64"

      - name: Upload talosctl
        uses: actions/upload-artifact@v4
        with:
          name: talosctl
          path: _out/talosctl-linux-amd64
          if-no-files-found: error
          retention-days: 1

  build-release:
    needs: [check-releases, build-talos]
    name: Build release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Download talosctl
        uses: actions/download-artifact@v4
        with:
          name: talosctl

      - name: Build
        env:
          PCR_SIGNING_KEY: ${{ secrets.PCR_SIGNING_KEY }}
          UKI_SIGNING_CERT: ${{ secrets.UKI_SIGNING_CERT }}
          UKI_SIGNING_KEY: ${{ secrets.UKI_SIGNING_KEY }}
        run: |
          mkdir _out
          echo "${PCR_SIGNING_KEY}" > ./_out/pcr-signing-key.pem
          echo "${UKI_SIGNING_CERT}" > ./_out/uki-signing-cert.pem
          echo "${UKI_SIGNING_KEY}" > ./_out/uki-signing-key.pem
          chmod +x ./talosctl-linux-amd64
          ./talosctl-linux-amd64 gen secureboot database --include-microsoft-certs
          mv _out secureboot
          mkdir _out
          docker run --rm -v ./secureboot:/secureboot:ro -v ./_out:/out \
            ghcr.io/${{ github.actor }}/talos/imager:${{ needs.check-releases.outputs.talos_release_tag }} \
              secureboot-installer \
              --arch amd64 \
              --base-installer-image ghcr.io/${{ github.actor }}/talos/installer:${{ needs.check-releases.outputs.talos_release_tag }} \
              --system-extension-image ghcr.io/jfroy/talos/glibc:${{ env.GLIBC_VERSION }} \
              --system-extension-image ghcr.io/jfroy/talos/zfs:${{ env.ZFS_VERSION }}-${{ needs.check-releases.outputs.talos_release_tag }} \
              --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/iscsi-tools:${{ env.ISCSI_TOOLS_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/util-linux-tools:${{ env.UTIL_LINUX_TOOLS_VERSION }} \
              --extra-kernel-arg amd_pstate=active \
              --extra-kernel-arg console=tty0 \
              --extra-kernel-arg console=ttyS0 \
              --extra-kernel-arg talos.network.interface.ignore=eth0 \
              --extra-kernel-arg talos.network.interface.ignore=enp66s0f0 \
              --extra-kernel-arg talos.network.interface.ignore=eth1 \
              --extra-kernel-arg talos.network.interface.ignore=enp66s0f1
          docker run --rm --privileged -v ./secureboot:/secureboot:ro -v ./_out:/out -v /dev:/dev \
            ghcr.io/${{ github.actor }}/talos/imager:${{ needs.check-releases.outputs.talos_release_tag }} \
              secureboot-iso \
              --arch amd64 \
              --base-installer-image ghcr.io/${{ github.actor }}/talos/installer:${{ needs.check-releases.outputs.talos_release_tag }} \
              --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/util-linux-tools:${{ env.UTIL_LINUX_TOOLS_VERSION }} \
              --extra-kernel-arg console=tty0 \
              --extra-kernel-arg console=ttyS0 \
              --extra-kernel-arg net.ifnames=0 \
              --extra-kernel-arg talos.network.interface.ignore=eth0 \
              --extra-kernel-arg talos.network.interface.ignore=eth1 \
              --extra-kernel-arg bond=bond0:eth2,eth3:mode=802.3ad:1500 \
              --extra-kernel-arg ip=bond0:dhcp

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: imjasonh/setup-crane@v0.4
      - name: Push installer image
        run: |
          crane push \
            --platform linux/amd64 \
            _out/installer-amd64-secureboot.tar \
            ghcr.io/${{ github.actor }}/talos/secureboot-installer:${{ needs.check-releases.outputs.talos_release_tag }}

      - name: Fetch Talos release body
        id: talos-release-body
        run: |
          echo 'talos_release_body<<EOF' >> $GITHUB_OUTPUT
          curl -sL https://api.github.com/repos/siderolabs/talos/releases/tags/${{ needs.check-releases.outputs.talos_release_tag }} | jq -r ".body" >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-releases.outputs.talos_release_tag }}
          body: ${{ steps.talos-release-body.outputs.talos_release_body }}
          files: _out/metal-amd64-secureboot.iso

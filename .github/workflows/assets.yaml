---
name: Talos Boot Assets Generation

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: Container image tag for the release
        required: true
      build_pkgs:
        description: Build pkgs
        type: boolean
        default: true
        required: false
      build_extensions:
        description: Build extensions
        type: boolean
        default: true
        required: false
      build_talos:
        description: Build talos
        type: boolean
        default: true
        required: false
      build_nvidia_driver_container:
        description: Build NVIDIA driver container
        type: boolean
        default: false
        required: false

concurrency:
  group: ${{ github.actor }}-build

env:
  AMD_UCODE_VERSION: "20240811"
  GLIBC_VERSION: "2.40"
  KERNEL_VERSION: "6.10.6-talos"
  ISCSI_TOOLS_VERSION: "v0.1.5"
  NVIDIA_DRIVER_VERSION: "550.90.07"
  UTIL_LINUX_TOOLS_VERSION: "2.40.2"
  ZFS_VERSION: "2.2.6"

jobs:
  set-rel:
    name: Set release branch
    runs-on: ubuntu-latest

    steps:
      - name: Set release branch
        id: set
        run: |
          release_branch=release-$(grep -Eo '[0-9]\.[0-9]+' <<< ${{ inputs.release_tag }})
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT

    outputs:
      release_branch: ${{ steps.set.outputs.release_branch }}

  build-pkgs:
    needs: [set-rel]
    if: ${{ !failure() && inputs.build_pkgs }}
    name: Build packages
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-pkgs
          ref: ${{ needs.set-rel.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
              gc = true
              gckeepstorage = 50000

              [[worker.oci.gcpolicy]]
                keepBytes = 10737418240
                keepDuration = 604800
                filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
              [[worker.oci.gcpolicy]]
                all = true
                keepBytes = 53687091200

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make ca-certificates base kernel nvidia-open-gpu-kernel-modules-production-pkg zfs-pkg \
            PLATFORM=linux/amd64 \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ inputs.release_tag }}" \
            PUSH="true"

  build-extensions:
    needs: [set-rel, build-pkgs]
    if: ${{ !failure() && (inputs.build_extensions || needs.build-pkgs.result == 'success') }}
    name: Build extensions
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-extensions
          ref: ${{ needs.set-rel.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make glibc nvidia-driver-production zfs \
            PLATFORM=linux/amd64 \
            PKGS="${{ inputs.release_tag }}" \
            PKGS_PREFIX="ghcr.io/${{ github.actor }}/talos" \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ inputs.release_tag }}" \
            PUSH="true"

  build-talos:
    needs: [set-rel, build-pkgs]
    if: ${{ !failure() && (inputs.build_talos || needs.build-pkgs.result == 'success') }}
    name: Build talos
    runs-on: [runs-on,runner=32cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/siderolabs-talos
          ref: ${{ needs.set-rel.outputs.release_branch }}-jfroy
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make imager installer talosctl-image \
            INSTALLER_ARCH="amd64" \
            PLATFORM="linux/amd64" \
            PKG_KERNEL="ghcr.io/${{ github.actor }}/talos/kernel:${{ inputs.release_tag }}" \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ inputs.release_tag }}" \
            PUSH="true"

  build-release:
    needs: [set-rel, build-talos, build-extensions]
    if: ${{ !failure() }}
    name: Build release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Build
        env:
          PCR_SIGNING_KEY: ${{ secrets.PCR_SIGNING_KEY }}
          UKI_SIGNING_CERT: ${{ secrets.UKI_SIGNING_CERT }}
          UKI_SIGNING_KEY: ${{ secrets.UKI_SIGNING_KEY }}
        run: |
          mkdir _out
          echo "${PCR_SIGNING_KEY}" > ./_out/pcr-signing-key.pem
          echo "${UKI_SIGNING_CERT}" > ./_out/uki-signing-cert.pem
          echo "${UKI_SIGNING_KEY}" > ./_out/uki-signing-key.pem
          docker run --rm -v ./_out:/_out \
            ghcr.io/${{ github.actor }}/talos/talosctl:${{ inputs.release_tag }} \
              gen secureboot database --include-well-known-uefi-certs
          mv _out secureboot
          mkdir _out
          docker run --rm -v ./secureboot:/secureboot:ro -v ./_out:/out \
            ghcr.io/${{ github.actor }}/talos/imager:${{ inputs.release_tag }} \
              secureboot-installer \
              --arch amd64 \
              --base-installer-image ghcr.io/${{ github.actor }}/talos/installer:${{ inputs.release_tag }} \
              --system-extension-image ghcr.io/jfroy/talos/glibc:${{ env.GLIBC_VERSION }} \
              --system-extension-image ghcr.io/jfroy/talos/nvidia-driver-production:${{ env.NVIDIA_DRIVER_VERSION }}-${{ inputs.release_tag }} \
              --system-extension-image ghcr.io/jfroy/talos/zfs:${{ env.ZFS_VERSION }}-${{ inputs.release_tag }} \
              --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/iscsi-tools:${{ env.ISCSI_TOOLS_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/util-linux-tools:${{ env.UTIL_LINUX_TOOLS_VERSION }} \
              --extra-kernel-arg console=tty0 \
              --extra-kernel-arg lsm=landlock,lockdown,yama,apparmor,bpf \
              --extra-kernel-arg lsm.debug \
              --extra-kernel-arg amd_pstate=active \
              --extra-kernel-arg spec_rstack_overflow=microcode
          docker run --rm --privileged -v ./secureboot:/secureboot:ro -v ./_out:/out -v /dev:/dev \
            ghcr.io/${{ github.actor }}/talos/imager:${{ inputs.release_tag }} \
              secureboot-iso \
              --arch amd64 \
              --base-installer-image ghcr.io/${{ github.actor }}/talos/installer:${{ inputs.release_tag }} \
              --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/util-linux-tools:${{ env.UTIL_LINUX_TOOLS_VERSION }} \
              --extra-kernel-arg console=tty0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: imjasonh/setup-crane@v0.4
      - name: Push installer image
        run: |
          crane push \
            --platform linux/amd64 \
            _out/installer-amd64-secureboot.tar \
            ghcr.io/${{ github.actor }}/talos/secureboot-installer:${{ inputs.release_tag }}

  build-nvidia-driver-container:
    needs: [set-rel, build-pkgs]
    if: ${{ !failure() && inputs.build_nvidia_driver_container }}
    name: Build NVIDIA driver container
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jfroy/gpu-driver-container
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          cd talos
          docker buildx build \
            --build-arg DRIVER_VERSION=${{ env.NVIDIA_DRIVER_VERSION }} \
            --build-arg KERNEL_VERSION=${{ env.KERNEL_VERSION }} \
            --build-arg TALOS_VERSION=${{ inputs.release_tag }} \
            -t ghcr.io/${{ github.actor }}/talos/nvidia-driver:${{ env.NVIDIA_DRIVER_VERSION }}-${{ env.KERNEL_VERSION }}-talos${{ inputs.release_tag }} \
            --push \
            .

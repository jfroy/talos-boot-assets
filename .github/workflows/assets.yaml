---
name: Talos Boot Assets Generation

on:
  workflow_dispatch:
    inputs:
      version:
        description: Talos version
        default: latest
        required: false
      force_build:
        description: Force build
        type: boolean
        default: false
        required: false
  schedule:
    - cron: "0 * * * *"

concurrency:
  group: ${{ github.actor }}-build

env:
  TALOS_VERSION: "${{ inputs.version || 'latest' }}"
  # renovate: depName=ghcr.io/siderolabs/amd-ucode
  AMD_UCODE_VERSION: "20240513"
  # renovate: depName=ghcr.io/siderolabs/iscsi-tools
  ISCSI_TOOLS_VERSION: "v0.1.4"
  NVIDIA_CONTAINER_TOOLKIT_VERSION: "v1.14.6"
  NVIDIA_DRIVER_VERSION: "550.100"
  # renovate: depName=ghcr.io/siderolabs/util-linux-tools
  UTIL_LINUX_TOOLS_VERSION: "2.39.3"

jobs:
  check-releases:
    name: Check for new releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Talos release version
        id: talos-release
        run: |
          if [ "${{ env.TALOS_VERSION }}" == "latest" ]; then
            talos_release_tag=$(curl -sL https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r ".tag_name")
          else
            talos_release_tag="${{ env.TALOS_VERSION }}"
          fi
          echo "talos_release_tag=$talos_release_tag" >> $GITHUB_OUTPUT

      - name: Fetch latest Boot Assets release version
        id: boot-asset-release
        run: |
          boot_assets_release_tag=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r ".tag_name")
          echo "boot_assets_release_tag=$boot_assets_release_tag" >> $GITHUB_OUTPUT

      - name: Compare release versions
        if: steps.talos-release.outputs.talos_release_tag != steps.boot-asset-release.outputs.boot_assets_release_tag
        id: compare-releases
        run: |
          compare_result=$(./.github/scripts/semver2.sh \
            ${{ steps.talos-release.outputs.talos_release_tag }} \
            ${{ steps.boot-asset-release.outputs.boot_assets_release_tag }})
          echo "compare_result=$compare_result" >> $GITHUB_OUTPUT

    outputs:
      newTalosReleaseFound: ${{ steps.compare-releases.outputs.compare_result }}
      talosReleaseTag: ${{ steps.talos-release.outputs.talos_release_tag }}

  build-pkgs:
    needs: [check-releases]
    if: ${{ needs.check-releases.outputs.newTalosReleaseFound || inputs.force_build }}
    name: Build packages
    runs-on: [runs-on,runner=16cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]
    strategy:
      max-parallel: 1
      matrix:
        target: ["ca-certificates", "base", "kernel", "nvidia-open-gpu-kernel-modules-pkg"]

    steps:
      - name: Get release tag
        id: pkgs-release
        run: |
          release=release-$(grep -Eo '[0-9]\.[0-9]+' <<< '${{ needs.check-releases.outputs.talosReleaseTag }}')
          echo "release=$release" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: siderolabs/pkgs
          ref: ${{ steps.pkgs-release.outputs.release }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout patches
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: patches
          sparse-checkout: patches/pkgs
          sparse-checkout-cone-mode: false

      - name: Apply patches
        run: |
          while IFS= read -r file; do
            echo "==> Adding $file"
            git apply -v $file
          done < <(find "./patches/patches/pkgs" -type f -name "*.patch" | sort)

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make ${{ matrix.target }} \
            BUILD="docker buildx build --cache-from type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }} --cache-to type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }},mode=max" \
            PLATFORM=linux/amd64 \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ needs.check-releases.outputs.talosReleaseTag }}" \
            PUSH="true"

  build-extensions:
    needs: [check-releases, build-pkgs]
    name: Build extensions
    runs-on: [runs-on,runner=16cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]
    strategy:
      matrix:
        target: ["nvidia-container-toolkit", "nvidia-open-gpu-kernel-modules"]

    steps:
      - name: Get release tag
        id: extensions-release
        run: |
          release=release-$(grep -Eo '[0-9]\.[0-9]+' <<< '${{ needs.check-releases.outputs.talosReleaseTag }}')
          echo "release=$release" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: siderolabs/extensions
          ref: ${{ steps.extensions-release.outputs.release }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout patches
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: patches
          sparse-checkout: patches/extensions
          sparse-checkout-cone-mode: false

      - name: Apply patches
        run: |
          while IFS= read -r file; do
            echo "==> Adding $file"
            git apply -v $file
          done < <(find "./patches/patches/extensions" -type f -name "*.patch" | sort)

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make ${{ matrix.target }} \
            BUILD="docker buildx build --cache-from type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }} --cache-to type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }},mode=max" \
            PLATFORM=linux/amd64 \
            PKGS="${{ needs.check-releases.outputs.talosReleaseTag }}" \
            PKGS_PREFIX="ghcr.io/${{ github.actor }}/talos" \
            TAG="${{ needs.check-releases.outputs.talosReleaseTag }}" \
            USERNAME="${{ github.actor }}/talos" \
            PUSH=true

  build-talos:
    needs: [check-releases, build-pkgs, build-extensions]
    name: Build talos
    runs-on: [runs-on,runner=16cpu-linux-x64,hdd=80,"run-id=${{ github.run_id }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: siderolabs/talos
          ref: refs/tags/${{ needs.check-releases.outputs.talosReleaseTag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Checkout patches
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: patches
          sparse-checkout: patches/talos
          sparse-checkout-cone-mode: false

      - name: Apply patches
        run: |
          while IFS= read -r file; do
            echo "==> Adding $file"
            git apply -v $file
          done < <(find "./patches/patches/talos" -type f -name "*.patch" | sort)

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          make imager installer \
            BUILD="docker buildx build --cache-from type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }} --cache-to type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }},mode=max" \
            INSTALLER_ARCH="amd64" \
            PLATFORM="linux/amd64" \
            USERNAME="${{ github.actor }}/talos" \
            TAG="${{ needs.check-releases.outputs.talosReleaseTag }}" \
            PKG_KERNEL="ghcr.io/${{ github.actor }}/talos/kernel:${{ needs.check-releases.outputs.talosReleaseTag }}" \
            PUSH="true"
          make talosctl \
            BUILD="docker buildx build --cache-from type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }} --cache-to type=s3,blobs_prefix=cache/${{ github.repository }}/,manifests_prefix=cache/${{ github.repository }}/,region=${{ env.RUNS_ON_AWS_REGION }},bucket=${{ env.RUNS_ON_S3_BUCKET_CACHE }},mode=max" \
            PLATFORM="linux/amd64"

      - name: Upload talosctl
        uses: actions/upload-artifact@v4
        with:
          name: talosctl
          path: _out/talosctl-linux-amd64
          if-no-files-found: error
          retention-days: 1

  build-boot-assets:
    needs: [check-releases, build-talos]
    name: Build boot assets
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download talosctl
        uses: actions/download-artifact@v4
        with:
          name: talosctl

      - name: Build
        env:
          PCR_SIGNING_KEY: ${{ secrets.PCR_SIGNING_KEY }}
          UKI_SIGNING_CERT: ${{ secrets.UKI_SIGNING_CERT }}
          UKI_SIGNING_KEY: ${{ secrets.UKI_SIGNING_KEY }}
        run: |
          mkdir out
          echo "${PCR_SIGNING_KEY}" > ./out/pcr-signing-key.pem
          echo "${UKI_SIGNING_CERT}" > ./out/uki-signing-cert.pem
          echo "${UKI_SIGNING_KEY}" > ./out/uki-signing-key.pem
          chmod +x ./talosctl-linux-amd64
          ./talosctl-linux-amd64 gen secureboot database --include-microsoft-certs
          docker run --rm -v ./out:/secureboot:ro" \
            ghcr.io/${{ github.actor }}/talos/imager:${{ needs.check-releases.outputs.talosReleaseTag }} \
              secureboot-installer \
              --arch amd64 \
              --base-installer-image ghcr.io/${{ github.actor }}/talos/installer:${{ needs.check-releases.outputs.talosReleaseTag }} \
              --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/iscsi-tools:${{ env.ISCSI_TOOLS_VERSION }} \
              --system-extension-image ghcr.io/${{ github.actor }}/talos/nvidia-container-toolkit:${{ env.NVIDIA_DRIVER_VERSION }}-${{ env.NVIDIA_CONTAINER_TOOLKIT_VERSION }} \
              --system-extension-image ghcr.io/${{ github.actor }}/talos/nvidia-open-gpu-kernel-modules:${{ env.NVIDIA_DRIVER_VERSION }}-${{ needs.check-releases.outputs.talosReleaseTag }} \
              --system-extension-image ghcr.io/siderolabs/util-linux-tools:${{ env.UTIL_LINUX_TOOLS_VERSION }} \
              --extra-kernel-arg amd_pstate=active \
              --extra-kernel-arg console=tty0 \
              --extra-kernel-arg console=ttyS0 \
              --extra-kernel-arg talos.network.interface.ignore=eth0 \
              --extra-kernel-arg talos.network.interface.ignore=enp66s0f0 \
              --extra-kernel-arg talos.network.interface.ignore=eth1 \
              --extra-kernel-arg talos.network.interface.ignore=enp66s0f1
          docker run --rm --privileged -v ./out:/secureboot:ro" -v /dev:/dev \
            ghcr.io/${{ github.actor }}/talos/imager:${{ needs.check-releases.outputs.talosReleaseTag }} \
              secureboot-iso \
              --arch amd64 \
              --base-installer-image ghcr.io/${{ github.actor }}/talos/installer:${{ needs.check-releases.outputs.talosReleaseTag }} \
              --system-extension-image ghcr.io/siderolabs/amd-ucode:${{ env.AMD_UCODE_VERSION }} \
              --system-extension-image ghcr.io/siderolabs/util-linux-tools:${{ env.UTIL_LINUX_TOOLS_VERSION }} \
              --extra-kernel-arg console=tty0 \
              --extra-kernel-arg console=ttyS0 \
              --extra-kernel-arg net.ifnames=0 \
              --extra-kernel-arg talos.network.interface.ignore=eth0 \
              --extra-kernel-arg talos.network.interface.ignore=eth1 \
              --extra-kernel-arg bond=bond0:eth2,eth3:mode=802.3ad:1500 \
              --extra-kernel-arg ip=bond0:dhcp

      - name: Upload secureboot-installer
        uses: actions/upload-artifact@v4
        with:
          name: secureboot-installer
          path: /out/installer-amd64-secureboot.tar
          if-no-files-found: error
          retention-days: 1

      - name: Upload secureboot-iso
        uses: actions/upload-artifact@v4
        with:
          name: secureboot-iso
          path: /out/metal-amd64-secureboot.iso
          if-no-files-found: error
          retention-days: 1

  push-installer-image:
    needs: [check-releases, build-boot-assets]
    name: Push installer image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Download secureboot-installer
        uses: actions/download-artifact@v4
        with:
          name: secureboot-installer
          path: /tmp/talos-build-assets

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: imjasonh/setup-crane@v0.4
      - name: Push installer image
        run: |
          crane push \
            --platform linux/amd64 \
            /tmp/talos-build-assets/installer-amd64-secureboot.tar \
            ghcr.io/${{ github.actor }}/talos/secureboot-installer:${{ needs.check-releases.outputs.talosReleaseTag }}

  create-release:
    needs: [check-releases, build-boot-assets, push-installer-image]
    name: Create a new release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download secureboot-iso
        uses: actions/download-artifact@v4
        with:
          name: secureboot-iso
          path: /tmp/talos-build-assets

      - name: Fetch Talos release body
        id: talos-release-body
        run: |
          echo 'talos_release_body<<EOF' >> $GITHUB_OUTPUT
          curl -sL https://api.github.com/repos/siderolabs/talos/releases/tags/${{ needs.check-releases.outputs.talosReleaseTag }} | jq -r ".body" >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Create a new release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-releases.outputs.talosReleaseTag }}
          body: ${{ steps.talos-release-body.outputs.talos_release_body }}
          files: /tmp/talos-build-assets/metal-amd64-secureboot.iso
